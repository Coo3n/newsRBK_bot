from asyncio.windows_events import NULL
from aiogram import Bot, types
import time 
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from config import TOKEN
from req import parse_site
from req import choice_rubric
from req import result_list
import keyboard as kb
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dispetcher = Dispatcher(bot,storage = storage)
finish_str = ""

async def anti_flood(*args, **kwargs):
    ans = args[0]
    await ans.answer("–ü—Ä–µ–∫—Ä–∞—Ç–∏ –ª–æ–º–∞—Ç—å –±–æ—Ç–∞, –∫–ª–∏–∫–∞–π —Å–ø–æ–∫–æ–π–Ω–µ–π")

@dispetcher.message_handler(commands=['start'])
@dispetcher.throttled(anti_flood,rate=3)
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup = kb.main_menu)

@dispetcher.message_handler(commands=['help'])
@dispetcher.throttled(anti_flood,rate=3)
async def process_help_command(message: types.Message):
    await message.reply("–î–∞–Ω–Ω—ã–π –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!")


@dispetcher.message_handler()
@dispetcher.throttled(anti_flood,rate=2)
async def switch_menu(message: types.Message):
    global finish_str
    match message.text:
        case "üíº–ü–æ–ª–∏—Ç–∏–∫–∞":
            finish_str = "–ü–æ–ª–∏—Ç–∏–∫–∞"
            await message.answer("üíº–ü–æ–ª–∏—Ç–∏–∫–∞", reply_markup=kb.other_menu)
        case "üìâ–≠–∫–æ–Ω–æ–º–∏–∫–∞":
            finish_str = "–≠–∫–æ–Ω–æ–º–∏–∫–∞"
            await message.answer("üìâ–≠–∫–æ–Ω–æ–º–∏–∫–∞", reply_markup=kb.other_menu)
        case "üèã–°–ø–æ—Ä—Ç":
            finish_str = "–°–ø–æ—Ä—Ç"
            await message.answer("üèã–°–ø–æ—Ä—Ç", reply_markup=kb.other_menu)
        case "üì∞–¢–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏":
            choice_rubric(finish_str,"–¢–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
            cnt_str = 1
            for news in result_list:
                if cnt_str == 2:
                    res = "üî• " + title + '\n' + news
                    await message.answer(res)
                    cnt_str = 1
                elif cnt_str == 1:
                    title = news
                    cnt_str+=1
            result_list.clear()
        case "üÜï–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å":
            choice_rubric(finish_str,"–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å")

            cnt_str = 1
            for news in result_list:
                if cnt_str == 2:
                    res = title + '\n' + news
                    await message.answer(res)
                    cnt_str = 1
                elif cnt_str == 1:
                    title = news
                    cnt_str+=1
            result_list.clear()
        case "üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await message.answer("üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_menu)
        case _:
            await message.answer("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!" +'\n'+ "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É: /help")

        

if __name__ == '__main__':
    executor.start_polling(dispetcher,skip_updates=True)